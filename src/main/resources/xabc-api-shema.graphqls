#GraphQL Schema for ABC API v0.1.0: simple + effcient

#
#TODO:
#   1. Switch input parameters to object with validattion
#   2. Added more comment to understand definition
#   3. Do we need airline operating code as input (such as: NZ, 3U, CA ...)? Default is NZ and only use flight number for now ("445", "101"...).
#   4. Doesn't require depature date for all relevant methods for now due to simple style, and default today. May not right?
#   5. Or for No.3/4, we can use id of flight which return from {flight.open}, and rest of call we can simply use this id instead of flight number
#

schema {
    query: Query
    mutation: Mutation
}

type Query {
    #Search flights by flight number or "*"
    flights(flightNumber: String):   [Flight]
    #Search boardings by flight number or "*"
    boardings(flightNumber:  String):   [Boarding]
    #Get seat map by flight number
    seatMap(flightNumber: String!): SeatMap
}

type Mutation {
    #all boarding operations
    board: BoardOperation
    #all deboarding operations
    deboard: DeboardOperation
    #all flight operations
    flight: FlightOperation
}



#Boarding set
type BoardOperation {
    #Board pax with name and flight number.
    boardByName(firstName: String, lastName: String!, flightNumber: String!): Boarding
    #Board pax with PNR and flight number (retrive detail before actual boarding)
    boardByPNR(pnr: String!, flightNumber: String!): Boarding
    #Board with barcode string from scanner directly, such as mPass, bPass,etc.
    boardByBarcode(barcode:String!, scannerName: String): Boarding
    #Board with seat number within certain flight
    boardBySeatNumber(seatNumber: String!, flightNumber: String!): Boarding
}

#Deboard set
type DeboardOperation {
    #Deboard by pax name and flight number
    deboardByName(firstName: String, lastName: String!, flightNumber: String!): Boarding
    #Deboard by seat number and flight number
    deboardBySeatNumber(seatNumber: String!, flightNumber: String!): Boarding

}

#Operating flight
type FlightOperation {
    #Open flight to triger caching relative data (Flight / Seat Map / Pax) and updating.
    open(agentSineCode:  String!, flightNumber: String!, departureAirport: String!): Flight
    #Close flight to triger clean up cache.
    close(agentSineCode:  String!, flightNumber: String!, departureAirport: String!): Flight
    #Get manifest with flight number
    manifest(agentSineCode:  String!, flightNumber:String!, departureAirport: String!): String
    #Get load sheet with flight number
    loadSheet(agentSineCode:  String!, flightNumber:String!, departureAirport: String!): String
}



enum FlightStatus {
    #Flight open
    FO
    #Flight close
    FC
    #Flight finished, and then can print load sheet / manifest
    FF
    #Close flight immediately
    FZ
    PD
}

type Flight {
    id: ID!
    jacSessionID:   String!
    agentSineCode:  String!

    airlineOperatingCode:   String!
    flightNumber:   String!
    gate:   String
    originalGate:   String
    departureAirport:   String!
    arrivalAirport: String!
    bookingClassPref:   String
    status: FlightStatus
    paxToBoard: Int!
    paxBoarded: Int!
    paxLeftToBoard: Int!
    paxCheckedIn:   Int!
    seatMap:    SeatMap!
}

type SeatMap {

    flightNumber:   String!
    aircraftDescription:    String
    airlineOperatingCode:   String
    equipment:  String
    rowList:    [Row]!
}

type Row {

    seatList:   [Seat]!
}

type Seat {
    column: String!
    occupation: String
    firstName:  String
    lastName:   String
    loyaltyTier:    String
    specialHandling:    String
    unfitted:   String
    type:   Boolean!
    lastKnownLocation:  String
    checkInStatus:  String
    boardingInfo:   String!

}

enum BoardingStatus {
    INACTIVE
    TO_BE_PROCESSED
    BOARDED
    DEBOARD
    REJECTED
    WARNING
}

enum BoardingSubStatus {
    ACK
    THROUGH_GATE
    DID_NOT_GO_THROUGH_GATE
}

enum BoardType {
    MANUAL
    BPASS
    MPASS
}

type Scanner {
    name:   String!
    ip: String!
    mode:   String
}

type Boarding {
    id: ID!
    state:  BoardingStatus
    subState:   BoardingSubStatus

    agentSineCode:  String!
    scanner:    Scanner
    jacSessionID:   String

    flight: Flight!

    lastName:   String!
    firstName:  String
    type: String
    pnr:    String
    paxRef: String
    paxNumber:  String
    child:  Boolean!
    infant: Boolean!
    withInfant: Boolean!
    withBoardingPass:   String

    seat:   Seat

    groupNumber:    String
    boardingInfo:   String
    boardType:  BoardType
    scanNumber: String
    boardTime:  String
    info:   String
    csn:    String
    customerGUID:   String
    loyaltyTier:    String
    frequentFlyerProgram:   String
    frequentFlyerNumber:    String
    inbound:    String
    ep1:    Boolean!
    numberOfBags:   String
    checkedIn:  Boolean!
    orginalCheckedIn:   Boolean!
    webCheck:   Boolean!
    checkInStatus:  String
    specialHandling:    String
    lastKnownLocation:  String
    bagTagNumbers:  String
    isTranship: Boolean!
    isTransit:  Boolean!
    exitRow:    Boolean!
    acknowledgeDateTime:    String
    gate:   String

}